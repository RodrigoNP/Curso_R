geom_bar(aes(class, y=..prop..,
group=1)))
## fill vs color ##
(bar_color <- ggplot(cars)+
geom_bar(aes(class,
color=drv)))
(bar_fill <- ggplot(cars)+
geom_bar(aes(class,
fill=drv)))
## position = ' ' ##
(bar_position_fill <- ggplot(cars)+
geom_bar(aes(class,
fill=drv), position='fill'))
(bar_position_dodge <- ggplot(cars)+
geom_bar(aes(class,
fill=drv), position='dodge'))
#### Histograma y densidad ####
# para generar el df
set.seed(2022)
n <- 100
mean_h <- 30000
mean_m <- 24000
sd_h <- 3000
sd_m <- 5000
salarios <- tibble(
id=seq(n),
sexo= factor(rep(c('m','h'), each= n/2)),
salario= round(c(rnorm(n/2, mean_m, sd_m),
rnorm(n/2, mean_h, sd_h)))
)
# Densidad con línea vertical
(density <- ggplot(salarios,
aes(salario))+
geom_density()+
geom_vline(aes(xintercept=mean(salario))))
# si queremos distinguir por sexo
(density_group <- ggplot(salarios,
aes(salario, color= sexo))+
geom_density()+
geom_vline(aes(xintercept=mean(salario)),
color='red'))
(histogram <- ggplot(salarios,
aes(salario))+
geom_histogram(bins=50))
(histogram <- ggplot(salarios,
aes(salario))+
geom_histogram(bins=100))
(histogram <- ggplot(salarios,
aes(salario))+
geom_histogram(bins=10))
(histogram_bw <- ggplot(salarios,
aes(salario))+
geom_histogram(binwidth = 5000))
(histogram_sex0 <-
ggplot(salarios,
aes(salario, fill= sexo))+
geom_histogram(bindwidth=5000))
(histogram_sex0 <-
ggplot(salarios,
aes(salario, fill= sexo))+
geom_histogram())
(histogram_sex0 <-
ggplot(salarios,
aes(salario, fill= sexo))+
geom_histogram(binwidth = 5000))
(histogram_sexo <-
ggplot(salarios,
aes(salario, fill= sexo))+
geom_histogram(binwidth = 2500))
(histogram_sexo <-
ggplot(salarios,
aes(salario, color= sexo))+
geom_histogram(binwidth = 2500))
(histogram_sexo <-
ggplot(salarios,
aes(salario, color= sexo))+
geom_histogram(binwidth = 2500,
position= 'dodge',
fill='white'))
(histogram_sexo <-
ggplot(salarios,
aes(salario, color= sexo))+
geom_histogram(binwidth = 2500,
fill='white'))
(histogram_sexo <-
ggplot(salarios,
aes(salario, color= sexo))+
geom_histogram(binwidth = 2500,
position= 'dodge',
fill='white'))
(histogram_bwidth <- ggplot(salarios,
aes(salario))+
geom_histogram(binwidth = 5000))
2+2
x <- 7
x + 2
rm(list = ls())
x+2
numeric.var <- 6777
numeric.var <- 6+6-7/9*9+sqrt(9)
numeric.var.1 <- 6777
numeric.var.2 <- 6+6-7/9*9+sqrt(9)
numeric.var.1+ numeric.var.2
sqrt(numeric.var)
numeric.var/x
x <- 0
numeric.var/x
nombre <- 'rodrigo'
a>5
a<- 7
a>5
nu
(a<5)
True + 4
T + 4
consolas <- as.factor(c('ps5', 'xbox', 'switch'))
factores<- c('xbox', 'switch', 'ps5')
factores<- as.factor(factores)
is.tipo(a)
is.numeric(a)
factores<- as.character(factores)
vector <- c(1,4,7,9,10)
vector<- c(90,40, vector)
vector <- c(1,4,7,9,10)
vector<- c(90,40, vector)
length(vector)
vector[3]
vector <- c(90,40,1,4,7,9,10)
posicion_1 <- vector[3]
posicion_6 <- vector[6]
vector[6]
vector[vector>5]
vector[vector=5]
vector[vector==5]
numeric(5)
numeric(5)
numeric(10)
vector[vector=5]
vector[1:4]
serie <- 2:7
vector[c(1:4, 6)]
a<- c(1,6,9,23,45)
b<- c(23,6,7,90, 70)
a & b
a[a & b]
a|b
a!=b
conjunto_a<- c(1,6,9,23,45)
conjunto_b<- c(23,6,7,90, 70)
conjunto_a & conjunto_b
vector<- 1:10
vector[  ! vector< 4]
vector + 2
vector*2
series<- 1:10
vector[2:3]
vector >= 4
mean(1:10)
?mean()
vector[vector %in% 5]
vector[vector %in% c(3,7)]
serie<- 1:10
3 %in% serie
carreras<- c('eco', 'cpol', 'ri')
'eco' %in% carrera
'eco' %in% carreras
f<- c(2,7,5,1)
f<- c(2,7,5,1)
f^3
f[1]+f[4]
mean(f>=4)
f>=4
f+ c(1,4,2,3)
c(f,c(1,4,2,3))
f+ c(1,4,2)
f[f>=3]
f[3]
f[h]
h<- c(1,0,1)
f[h]
h<- c(1,0,1)
f[c(T,F,T)]
h<- c(1,2,1)
f[h]
f[h]
f[c(T,F,T)]
f[f>1]
is.numeric(f)
f<- c(2,7,5,1,'f')
is.numeric(f)
is.numeric(f)+ 4
f<- c(2,7,5,1)
f[c(1,4)]
c(f,f)
as.character(f)
c(f,f)
median(f)
max(f)
min(f)
rep(f, 2)
rep(f, times=2)
n<- 2
rep(f, times=n)
rep(f, times=n)
n<- 1000
rep(f, times=n)
rep(f, n)
numeric(5)
character(length=8)
character(length=n)
vector <- NULL
(rep('azules', 4), rep('verdes', 3))
moneda<- c( rep('azules', 4), rep('verdes', 3))
moneda
sample(moneda, 4, rep=F)
set.seed(2022)
set.seed(2022)
moneda<- c( rep('azules', 4), rep('verdes', 3))
sample(moneda, 4, rep=F)
moneda<- c( rep('azules', 4), rep('verdes', 3))
sample(moneda, 4, rep=F)
sort(f, decreasing = T)
sort(f)
# unique me devuelve los elementos , pero solo una vez
unique(c(2,2,2,4,5,6))
coin_toss<- sample(rep(c('aguila', 'sol'), 10, replace=T))
coin_toss
coin_toss<- sample(rep(c('aguila', 'sol') , 10), replace=T)
coin_toss
coin_toss<- sample(rep(c('aguila', 'sol') , 10), 2,  replace=T)
moneda<- c('aguila', 'sol')
moneda<- rep(moneda, 10)
coin_toss<- sample(moneda,10, replace = F)
coin_toss<- sample(moneda,10, replace = T)
y<- 1:10
y[coin_toss=='aguila']
set.seed(2022)
coin_toss<- sample(rep(c('aguila', 'sol') , 10), 2,  replace=T)
y<- 1:10
y[coin_toss=='aguila']
coin_toss=='aguila'
moneda<- c('aguila', 'sol')
moneda<- rep(moneda, 10)
coin_toss<- sample(moneda,10, replace = T)
coin_toss=='aguila'
y[coin_toss=='aguila']
seq(3)
seq(3, 9)
seq(3,9,2)
df<- data.frame(id=seq(n),
genero= sample(c('h','m','o'),n, replace = T),
carrera= sample(c('eco','cpol','ri'),n, replace = T)
)
View(df)
View(df)
View(df)
View(df)
runif(n, 6, 10)
round(runif(n, 6, 10))
round(runif(n, 6, 10),2)
rnorm(n, 7, 3)
qnorm(.05)
df<- data.frame(id=seq(n),
genero= sample(c('h','m','o'),n, replace = T),
carrera= sample(c('eco','cpol','ri'),n, replace = T),
calificacion= round(runif(n, 6, 10),2)
)
df$calificacion
with(df, mean(calificacion))
mean(calificacion)
mean(df$calificacion)
max(df$calificacion)
min(df$calificacion)
a<- c(1,2,3,4,5,6)
b<- c(5,6,7,8,9,10)
a&b
a|b
a!=b
a<- c(1,2,3,4,5,6)
b<- c(5,6,7,8,9,10)
a==b
a&b
a<- c(1,0,1,1,0,1,1)
b<- c(1,0,1,0,0,1)
a&b
a<- c(1,0,1,1,0,1)
b<- c(1,0,1,0,0,1)
a&b
rm(list = ls())
library(tidyverse)
library(tidyverse)
cars<- mtcars
sueño<- sleep
presidencial<- readxl::read_excel('presidencia.xlsx', skip = 5)
# Cambiar el directorio
setwd('C:/Users/rodri/OneDrive - INSTITUTO TECNOLOGICO AUTONOMO DE MEXICO/Curso_R/02_Dplyr/Data')
presidencial<- readxl::read_excel('presidencia.xlsx', skip = 5)
rm(lists=ls())
rm(list=ls())
n<- 10000
set.seed(2020)
df<-data.frame(
id=1:n,
sex=sample(c('h','m'), n, replace = T),
edad=floor(runif(n, min=17, max=27)),
carrera=sample(c('eco','cpol','ri','derecho','conta','mat'), n, replace = T),
prom=runif(n, 6, 10)
)
view(df)
View(df)
View(df)
df$
df$prom
df<-data.frame(
id=1:n,
sex=sample(c('h','m'), n, replace = T),
edad=floor(runif(n, min=17, max=27)),
carrera=sample(c('eco','cpol','ri','derecho','conta','mat'), n, replace = T),
prom=runif(n, 6, 10)
)
df$prom
mean(df$prom)
df[29,3]
df[29,3]
View(df)
View(df)
### cargar paquetes ####
library(tidyverse)
### cargar paquetes ####
library(tidyverse)
getwd()
#obtengo el directorio
getwd()
presidencial <- read_excel('Data/presidencia.xlsx')
library(readxl)
presidencial <- read_excel('Data/presidencia.xlsx')
# cambiar directorio
setwd('C:/Users/rodri/OneDrive - INSTITUTO TECNOLOGICO AUTONOMO DE MEXICO/Curso_R/02_Dplyr')
presidencial <- read_excel('Data/presidencia.xlsx')
#obtengo el directorio
getwd()
presidencial<- read_excel('C:/Users/rodri/OneDrive - INSTITUTO TECNOLOGICO AUTONOMO DE MEXICO/Curso_R/02_Dplyr/Data/presidencia.xlsx')
view(presidencial)
# poniendo path relativo al directorio
presidencial <- read_excel('Data/presidencia.xlsx',
skip = 4)
# poniendo path relativo al directorio
presidencial <- read_excel('Data/presidencia.xlsx',
skip = 4)
View(presidencial)
View(presidencial)
presidencial<- presidencial %>%
rename(voto= TOTAL_VOTOS_CALCULADOS ,
lista_nominal= LISTA_NOMINAL_CASILLA)
library(dplyr)
presidencial<- rename(presidencial,
voto= TOTAL_VOTOS_CALCULADOS ,
lista_nominal= LISTA_NOMINAL_CASILLA)
presidencial <- presidencial %>%
mutate(partipacion= votos/ lista_nominal)
presidencial <- presidencial %>%
mutate(partipacion= voto/ lista_nominal)
presidencial <- presidencial %>%
mutate(partipacion= voto/ lista_nominal)
presidencial <- presidencial %>%
mutate(partipacion= voto/ lista_nominal)
with(presidencial, mean(participacion))
presidencial <- presidencial %>%
mutate(participacion= voto/ lista_nominal)
with(presidencial, mean(participacion))
with(presidencial, mean(participacion, na.rm=T))
presidencial<- presidencial %>%
mutate(rural = ifelse(CASILLA=='Rural',1,0))
rurales <- presidencial %>%
filter(rural==1)
rurales <- presidencial %>%
filter(rural==1|rural==NA)
is.na(NA)
is.na(c(NA,2))
rurales <- presidencial %>%
filter(rural==1|is.na(rural)==T)
independientes <- presidencial %>%
filter(CAND_IND_01>0 | CAND_IND_02>0)
a<- c(3,5)
3 %in% a
sqrt(2)^2==2
near(sqrt(2)^2, 2)
near(sqrt(2)^2, 2)
morena<- presidencial %>%
select(CLAVE_CASILLA, NOMBRE_ESTADO, contains('MORENA'))
View(morena)
morena<- presidencial %>%
select(CLAVE_CASILLA, NOMBRE_ESTADO, contains('MORENA'),
everything())
# poniendo path relativo al directorio
presidencial <- read_excel('Data/presidencia.xlsx',
skip = 4)
presidencial <- presidencial %>%
rename(voto= TOTAL_VOTOS_CALCULADOS ,
lista_nominal= LISTA_NOMINAL_CASILLA) %>%
mutate(participacion= voto/ lista_nominal,
rural = ifelse(CASILLA=='Rural',1,0)) %>%
filter(CAND_IND_01>0 | CAND_IND_02>0)
ejercicio <- presidencial %>%
rename(mc= `MOVIMIENTO CIUDADANO`,
panal= `NUEVA ALIANZA`) %>%
mutate(
prian=PAN+ PRI+ PRD,
m= ifelse(TIPO_CASILLA=='M',1,0)
) %>%
select(CLAVE_CASILLA, NOMBRE_DISTRITO, everything())
View(ejercicio)
presidencial<- presidencial %>%
mutate(total_pan= sum(PAN, na.rm = T))
View(presidencial)
sum(presidencial$PAN, na.rm = T)
presidencial <- presidencial %>%
group_by(NOMBRE_ESTADO) %>%
mutate(edo_pan= sum(PAN, na.rm = T))
presidencial <- presidencial %>%
group_by(NOMBRE_DISTRITO) %>%
mutate(edo_pan= sum(PAN, na.rm = T))
estados <- presidencial %>%
group_by(NOMBRE_ESTADO) %>%
mutate(pan= sum(PAN, na.rm = T))
estados <- presidencial %>%
group_by(NOMBRE_ESTADO) %>%
summarise(pan= sum(PAN, na.rm = T))
View(estados)
estados <- presidencial %>%
group_by(NOMBRE_ESTADO, NOMBRE_DISTRITO) %>%
summarise(pan= sum(PAN, na.rm = T))
estados <- presidencial %>%
group_by(NOMBRE_ESTADO, NOMBRE_DISTRITO) %>%
summarise(pan= sum(PAN, na.rm = T),
pri=sum(PRI, na.rm = T))
estados <- presidencial %>%
group_by(NOMBRE_ESTADO) %>%
summarise(pan= sum(PAN, na.rm = T),
pri=sum(PRI, na.rm = T))
estados <- presidencial %>%
group_by(NOMBRE_ESTADO) %>%
summarise(
across(PAN:CAND_IND_02, sum)
)
presidencial <- presidencial %>%
rowwise() %>%
mutate(
total_morena= sum(c_across(contains('MORENA')))
)
estados <- presidencial %>%
group_by(NOMBRE_ESTADO) %>%
summarise(
across(PAN:CAND_IND_02, sum, na.rm=T)
)
mean_party <- presidencial %>%
group_by(NOMBRE_ESTADO) %>%
summarise(
across(PAN:CAND_IND_02, mean, na.rm=T)
)
View(mean_party)
presidencial <- presidencial %>%
rowwise() %>%
mutate(
total_morena= sum(c_across(contains('MORENA'))),
total_pan= sum(c_across(contains('PAN')))
)
presidencial <- presidencial %>%
mutate(
participativo= case_when(
participacion< .3 ~ 'poco',
participacion>= .3 & participacion <= .6 ~ 'promedio',
TRUE ~ 'muy'
) )
presidencial_long <- presidencial %>%
pivot_longer(PAN:CAND_IND_02,
names_to = 'partido',
values_to = 'votos_partido')
View(presidencial_long)
presidencial_long <- presidencial %>%
pivot_longer(PAN:CAND_IND_02,
names_to = 'partido',
values_to = 'votos_partido') %>%
select(CLAVE_CASILLA, partido, votos_partido, everything())
presidencial_wide <- presidencial_long %>%
pivot_wider(names_from = partido,
values_from = votos_partido)
View(presidencial_wide)
presidencial_long<- presidencial_long %>%
group_by(CLAVE_CASILLA) %>%
arrange(desc(votos_partido), .by_group = T)
presidencial_long<- presidencial_long %>%
group_by(CLAVE_CASILLA) %>%
arrange(desc(votos_partido))
presidencial_long<- presidencial_long %>%
group_by(CLAVE_CASILLA) %>%
arrange(desc(votos_partido), .by_group = T)
presidencial_long<- presidencial_long %>%
group_by(CLAVE_CASILLA) %>%
arrange(desc(votos_partido), .by_group = T) %>%
mutate(ganador=first(partido))
presidencial_long<- presidencial_long %>%
group_by(CLAVE_CASILLA) %>%
arrange(desc(votos_partido), .by_group = T) %>%
mutate(ganador=first(partido),
ranking=row_number())
presidencial_long<- presidencial_long %>%
group_by(CLAVE_CASILLA) %>%
arrange(desc(votos_partido), .by_group = T) %>%
mutate(ganador=first(partido),
ranking=row_number()) %>%
select(CLAVE_CASILLA, partido, votos_partido, ranking, ganador)
